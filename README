***********************************************
  PBBT -- Pluggable Black-Box Testing toolkit
***********************************************

Overview
========

PBBT is a regression test harness for *black-box testing*.  It
is based on the idea that behavior of a complex system could be captured
as a set of input/output pairs of a well-defined simple structure.

::

     input    +-----------+   output
    --------> | Black Box | --------->
              +-----------+

Examples of of black-box testing are:

1. A database system: the input is a SQL statement, the output is a
   sequence of output records.
2. A web application: the input is an HTTP request, the output if an
   HTTP response.
3. Black box testing of GUI applications is less obvious, but one
   possible approach is: the input is a sequence of user actions, the
   output is a screenshot of the application window.

PBBT allows you to:

* define your own test types;
* provide a set of test cases using convenient and compact YAML format;
* in the *train* mode, run the test cases and record expected output;
* in the *check* mode, run the test cases and compare the produced
  output with the expected output.

PBBT is a free software released under MIT license.  PBBT is written by
Kirill Simonov from Prometheus Research, LLC.


Using PBBT
==========

PBBT is a Python library and a command-line script.  By default, PBBT
provides only a limited number of test types.  You can use PBBT API
to define custom test types.

To install PBBT, you can use pip_ package manager::

    $ pip install pbbt

This command will download the latest version of PBBT from
http://pypi.python.org/pypi/pbbt and install the ``pbbt`` Python
package and command-line utility.

To start using PBBT, you need to create a file with input data.
For example, create ``input.yaml`` with the following content::

    py: |
      print "Hello, World!"

The file is in YAML_ format and specifies a mapping::

    { "py": "print \"Hello, World!\"\n" }

For description of YAML syntax, see http://yaml.org/.

Now you can execute PBBT in *training* mode to generate the
respective output data.  Run::

    $ pbbt input.yaml output.yaml --train

and accept new output when asked.  PBBT will write output data
into ``output.yaml``::

    py: print-hello-world
    stdout: |
      Hello, World!

Now you can start PBBT to run the test again and validate the output::

    # pbbt input.yaml output.yaml

An input file specifies a single test case, however a special test
type, called a *test suite*, allows you to specify an unlimited
number of tests.  For example::

    title: My tests
    tests:
    - py: |
        print "Hello, World!"
    - py: |
        print 2+2

Test suites could be nested or included from another file::

    title: Top-level tests
    tests:
    - title: Nested tests
      tests:
      - include: other-input.yaml


Input file format and predefined test types
===========================================

By default, PBBT supports a small set of predefined test types.
Those include:

* a test suite: a collection of test cases;
* Python test;
* Shell test;
* File manipulation tests.

A test case is a record with a specific set of fields.  Some fields
are mandatory; some could be omitted.

Common
------

The following fields are used by more than one test type.

Fields:

``skip``: ``true`` or ``false``
    Skip the test.
``if``: variable, list of variables or Python expression
    Conditional check.
``unless``: variable, list of variables or Python expression
    Negative conditional check.
``ignore``: ``true``, ``false`` or regular expression
    Ignore output or part of it.

Test Suite
----------

A test suite is a collection of test cases.

Fields:

``title``: free-form text
    The title of the suite
``suite``: identifier
    The identifier of the suite.  If not set, generated from the title.
``tests``: list of tests
    List of nested test cases.

Set
---

This test cast defines a conditional variable.

Fields:

``set``: name or a dictionary of names and values
    Adds a conditional variable.

Include
-------

Loads test data from another file.

Fields:

``include``: file name
    The file to load.

Python
------

Executes Python code.

Fields:

``py``: filename or Python code
    Either the file name or Python code to execute.
``stdin``: text data
    ``stdin`` content.
``except``: exception name
    If set, indicates that the code is expected to produce an exception.

Shell
-----

Executes a shell command.

Fields:

``sh``:
    The shell command.
``exit``: ``int``
    The expected exit code; ``0`` by default.

Write to File
-------------

Fields:

``write``:
    File name.
``data``:
    File content.

Read from File
--------------

Fields:

``read``:
    File name.

Remove File
-----------

Fields:

``rm``:
    File or a list of files.

Make Directory
--------------

Fields:

``mkdir``:
    Directory name.

Remove Directory
----------------

Fields:

``rmdir``:
    Directory name.

Defining new test types
=======================

You can define your own test types using ``test_case`` decorator
and ``test_field`` descriptor::

    @test_case
    class MyTestCase(object):

        class Input:
            name = test_field(str)
            # More fields...

        class Output:
            name = test_field(str)
            # More fields...

        def __init__(self, ctl, input, output):
            self.ctl = ctl
            self.input = input
            self.output = output

        def __call__(self):
            # Runs the test with the given input and expected output.
            # On success, returns new output record.


Command-line Reference
======================

Usage::

    pbbt [<options>] INPUT [OUTPUT]

Here, ``INPUT`` and ``OUTPUT`` are files which contain input and
output test data respectively.

The following options are available::

``-h``, ``--help``
    Display usage information and exit.

``-q``, ``--quiet``
    Show only warnings and errors.

``-T``, ``--train``
    Run tests in the training mode.

``-P``, ``--purge``
    Purge stale output data.

``-M N``, ``--max-errors N``
    Halt after ``N`` tests failed; ``0`` means "never".

``-D VAR``, ``-D VAR=VALUE``, ``--define VAR``, ``--define VAR=VALUE``
    Set a conditional variable.

``-E FILE``, ``-E MODULE``, ``--extend FILE``, ``--extend MODULE``
    Load a PBBT extension from a file or a Python module.

``-S ID``, ``--suite ID``
    Run a specific test suite.


API Reference
=============

``pbbt.Test(C)``
    Decorates an implementation of a test type.

``pbbt.Field(...)``
    Describes a field of an input or an output record.

``pbbt.Record(...)``
    Base class for all input and output records.

``pbbt.Control(...)``
    The controller class.

``pbbt.load(...)``
    Loads a test record from a YAML file.

``pbbt.dump(...)``
    Saves a test record to a YAML file.

``pbbt.run(...)``
    Starts the test harness.

``pbbt.main(...)``
    Implements the ``pbbt`` command-line utility.

``pbbt.TestCaseMixin``
    Provides common utilities for test type implementations.

``pbbt.RunAndCompareMixin``
    Provides common utilities for test type implementations.

``pbbt.UI``
    Provides user input/output services.

``pbbt.ConsoleUI``
    Implements ``UI`` for console input/output.

``pbbt.SilentUI``
    Implements ``UI`` for use with ``--quiet`` option


.. vim: set spell spelllang=en textwidth=72:
